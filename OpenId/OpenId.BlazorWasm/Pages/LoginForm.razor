@page "/account/login"
@using Microsoft.AspNetCore.Components.Authorization

@using OpenId.BlazorWasm.Infra
@using OpenId.Shared.Models
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthState
@inject IConfiguration Configuration
@inject ILoginService LoginService

<div class="card mt-3 shadow-sm rounded auth-card">
    <div class="px-4 pt-4">
        <h2 class="card-title">Log in @Environment</h2>
        <hr/>
    </div>
    <div class="card-body p-4 h-100">
        <EditForm class="d-flex flex-column h-100" Model="LoginInputModel" method="post" OnValidSubmit="LoginUserAsync"
                  FormName="login">
            <DataAnnotationsValidator/>
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="LoginInputModel.Email" class="form-control" autocomplete="username"
                           aria-required="true"/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => LoginInputModel.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText id="password" type="password"
                           @bind-Value="LoginInputModel.Password" class="form-control" autocomplete="current-password"
                           aria-required="true"/>
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => LoginInputModel.Password" class="text-danger"/>
            </div>
            <div class="mt-auto">
                <button type="submit" class="w-100 mt-3 btn btn-lg btn-primary">Log in</button>
                <p class="mt-3">
                    Don't have an account?
                    <a class="card-link"
                       href="@(NavigationManager.GetUriWithQueryParameters("account/register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Sign up</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    [SupplyParameterFromForm] private LoginInputModel LoginInputModel { get; set; } = new();
    
    protected override void OnInitialized() => Environment = Configuration.GetValue<string>("Environment");
    private string? Environment { get; set; }
    private async Task LoginUserAsync()
    {
        var result = await LoginService.LoginUserAsync(LoginInputModel.Email, LoginInputModel.Password);
        if (result == null)  return; 
        
        await ((CustomAuthenticationStateProvider)AuthState).UpdateAuthenticationState(result.access_token, result.refresh_token);
        NavigationManager.NavigateTo("/");
    }
}